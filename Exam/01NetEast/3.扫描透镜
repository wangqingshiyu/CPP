/*
在N*M的草地上,提莫种了K个蘑菇,蘑菇爆炸的威力极大,兰博不想贸然去闯,而且蘑菇是隐形的.只 有一种叫做扫描透镜的物品可以扫描出隐形的蘑菇,于是他回了一趟战争学院,买了2个扫描透镜,一个 扫描透镜可以扫描出(3*3)方格中所有的蘑菇,然后兰博就可以清理掉一些隐形的蘑菇. 问:兰博最多可以清理多少个蘑菇?
注意：每个方格被扫描一次只能清除掉一个蘑菇。 
输入描述:
第一行三个整数:N,M,K,(1≤N,M≤20,K≤100),N,M代表了草地的大小;
接下来K行,每行两个整数x,y(1≤x≤N,1≤y≤M).代表(x,y)处提莫种了一个蘑菇.
一个方格可以种无穷个蘑菇.


输出描述:
输出一行,在这一行输出一个整数,代表兰博最多可以清理多少个蘑菇.
*/

// 题目中，很明显要用暴力搜索来解决，但是其实还有更偷懒的方法，因为只需要扫描两次，因此手工暴力一样可以解决，只是写起来麻烦一些。

#include <cstdio>
#include <iostream>
#include <cstring>
using namespace std;
int main(){
    int n,m,k;
    int a[25][25];
    while(scanf("%d %d %d",&n,&m,&k) != EOF){
        memset(a,0,sizeof(a));
        int x,y;
        for(int i=1;i<=k;i++){
            scanf("%d %d",&x,&y);
            a[x][y]++;
        }
        int ans=0;
        int max1=0,max2=0,sum=0;
        int maxx,maxy;
        for(int i=2;i<=n-1;i++)//第一次
            for(int j=2;j<=m-1;j++){
                sum=0;
                if(a[i-1][j-1]>0)
                    sum++;
                if(a[i-1][j]>0)
                    sum++;
                if(a[i-1][j+1]>0)
                    sum++;
                     
                if(a[i][j-1]>0)
                    sum++;
                if(a[i][j]>0)
                    sum++;
                if(a[i][j+1]>0)
                    sum++;
                     
                if(a[i+1][j-1]>0)
                    sum++;
                if(a[i+1][j]>0)
                    sum++;
                if(a[i+1][j+1]>0)
                    sum++;
                 
                if(sum>max1){
                    max1=sum;
                    maxx=i;
                    maxy=j;
                }
            }
        if(a[maxx-1][maxy-1]>0) //减少一个蘑菇
            a[maxx-1][maxy-1]--;
        if(a[maxx-1][maxy]>0)
            a[maxx-1][maxy]--;
        if(a[maxx-1][maxy+1]>0)
            a[maxx-1][maxy+1]--;
         
        if(a[maxx][maxy-1]>0)
            a[maxx][maxy-1]--;
        if(a[maxx][maxy]>0)
            a[maxx][maxy]--;
        if(a[maxx][maxy+1]>0)
            a[maxx][maxy+1]--;
             
        if(a[maxx+1][maxy-1]>0)
            a[maxx+1][maxy-1]--;
        if(a[maxx+1][maxy]>0)
            a[maxx+1][maxy]--;
        if(a[maxx+1][maxy+1]>0)
            a[maxx+1][maxy+1]--;
         
        for(int i=2;i<=n-1;i++)//第二次
            for(int j=2;j<=m-1;j++){
                sum=0;
                if(a[i-1][j-1]>0)
                    sum++;
                if(a[i-1][j]>0)
                    sum++;
                if(a[i-1][j+1]>0)
                    sum++;
                     
                if(a[i][j-1]>0)
                    sum++;
                if(a[i][j]>0)
                    sum++;
                if(a[i][j+1]>0)
                    sum++;
                     
                if(a[i+1][j-1]>0)
                    sum++;
                if(a[i+1][j]>0)
                    sum++;
                if(a[i+1][j+1]>0)
                    sum++;
                 
                if(sum>max2){
                    max2=sum;
                }
            }
        ans=max1+max2; 
        cout<<ans<<endl;
    }
    return 0;
}

